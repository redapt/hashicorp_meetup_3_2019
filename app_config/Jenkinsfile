pipeline{
    agent any

    parameters {
        string(name: 'domain_name', description: 'The domain name you\'re deploying to.', defaultValue: 'redaptdemo.com')
    }
    stages{
        stage("Fetch sources"){
            steps 
            {   
                deleteDir()         
                git branch: 'jenkins', credentialsId: 'gh_creds', url: 'https://github.com/redapt/hashicorp_meetup_3_2019.git'
            }
        }
        stage('Setup Docker'){
            steps {
                withCredentials([
                    azureServicePrincipal(
                        clientIdVariable: 'ARM_CLIENT_ID',
                        clientSecretVariable: 'ARM_CLIENT_SECRET', 
                        credentialsId: 'azure_demo_creds', 
                        subscriptionIdVariable: 'ARM_SUBSCRIPTION_ID', 
                        tenantIdVariable: 'ARM_TENANT_ID'),
                    usernamePassword(
                        credentialsId: 'dockerhub', 
                        passwordVariable: 'DOCKERHUB_SECRET', 
                        usernameVariable: 'DOCKERHUB_USER')
                    ])
                {
                    copyArtifacts filter: '**/*.tfvars', projectName: 'HashicorpMeetupPlatform', selector: lastSuccessful(), target: '.'

                    dir('app_config') {

                        withEnv([
                            "TF_IN_AUTOMATION=1"
                        ]){
                        
                            sh '''
                                yes | terraform init
                            '''

                            sh"""
                                echo 'domain_name="${domain_name}"' >> terraform.tfvars
                                echo 'docker_username="${DOCKERHUB_USER}"' >> terraform.tfvars
                                echo 'docker_password="${DOCKERHUB_SECRET}"' >> terraform.tfvars

                                cat terraform.tfvars
                            """
                            retry {
                                sh'''
                                    terraform plan -var-file=terraform.tfvars -out=docker.plan
                                '''

                                sshagent(['meetup_ssh']) {
                                    sh'''
                                        terraform apply -auto-approve
                                    '''
                                }

                                script {
                                    sleep(60)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    post{
        always{
            echo "========always========"
        }
        success{
            echo "========pipeline executed successfully ========"
        }
        failure{
            echo "========pipeline execution failed========"
        }
    }
}